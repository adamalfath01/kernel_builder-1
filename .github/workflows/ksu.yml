name: With Ksu


on:
  workflow_dispatch:


jobs:
  build-kernel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          echo "ANYKERNEL_SOURCE=$(cat config.env | grep -w "ANYKERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ANYKERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "ANYKERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE=$(cat config.env | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_TARGET=$(cat config.env | grep -w "KERNEL_TARGET" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "BUILD_ARGS=$(cat config.env | grep -w "BUILD_ARGS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(TZ=Asia/Jakarta date "+%H-%M~%d_%m_%Y")" >> $GITHUB_ENV
          export PATH="$GITHUB_WORKSPACE/toolchain/linux-x86/clang-r498229b/bin:$PATH"
          export TC_DIR="$GITHUB_WORKSPACE/toolchain/linux-x86"
          export CLANG_DIR="$GITHUB_WORKSPACE/toolchain/linux-x86/clang-r498229b"
          export GCC_64_DIR="$GITHUB_WORKSPACE/toolchain/aarch64-linux-android-4.9"
          export GCC_32_DIR="$GITHUB_WORKSPACE/toolchain/arm-linux-androideabi-4.9"
          
      - name: Pull toolchain
        run: |
          git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 ${TC_DIR}
          git clone --depth=1 -b lineage-19.1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9.git ${GCC_64_DIR}
          git clone --depth=1 -b lineage-19.1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9.git ${GCC_32_DIR}
          
      - name: Pull kernel source
        run: |
          git clone --depth=1 ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} kernel-source
          echo "KERNEL_VERSION="$(cat kernel-source/arch/arm64/configs/vendor/ginkgo-perf_defconfig | grep "CONFIG_LOCALVERSION\=" | sed -r 's/.*"(.+)".*/\1/' | sed 's/^.//')"" >> $GITHUB_ENV
          
      - name: Build kernel
        run: |
          export KBUILD_BUILD_USER="Kernel"
          export KBUILD_BUILD_HOST="Koplak"
          args=" out=out \
                 ARCH=arm64 \
                 CC=clang  \
                 LD=ld.lld \
                 AR=llvm-ar \
                 AS=llvm-as \
                 NM=llvm-nm \
                 OBJCOPY=llvm-objcopy \
                 OBJDUMP=llvm-objdump \
                 STRIP=llvm-strip \
                 CROSS_COMPILE=$GITHUB_WORKSPACE/toolchain/aarch64-linux-android-4.9/bin/aarch64-linux-android- \
                 CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/toolchain/arm-linux-androideabi-4.9/bin/arm-linux-androideabi- \
                 CLANG_TRIPLE=aarch64-linux-gnu- "
          cd kernel-source
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          git apply KernelSU-hook.patch
          make ${args} vendor/ginkgo-perf_defconfig
          make -j$(nproc --all) ${args} Image.gz-dtb dtbo.img

      - name: Package kernel
        run: |
          git clone -b master https://github.com/kutemeikito/AnyKernel3 AnyKernel3 && rm -rf '*.git*' README.md *placeholder
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

      - name: Upload kernel to artifact
        uses: actions/upload-artifact@v3
        with:
          name: Ryzen-AOSP-11_14-${{ env.BUILD_TIME }}
          path: AnyKernel3/*
